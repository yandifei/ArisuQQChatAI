# Form implementation generated from reading ui file 'B:\爱丽丝QQ聊天AI项目\爱丽丝QQ聊天AI\resources\Arisu.ui'
#
# Created by: PyQt6 UI code generator 6.9.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_Arisu(object):
    def setupUi(self, Arisu):
        Arisu.setObjectName("Arisu")
        Arisu.setEnabled(True)
        Arisu.resize(1280, 719)
        Arisu.setMouseTracking(False)
        Arisu.setAcceptDrops(False)
        Arisu.setAutoFillBackground(False)
        Arisu.setStyleSheet("background-color: rgb(240, 244, 249);")
        self.verticalLayout = QtWidgets.QVBoxLayout(Arisu)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.TitleBar = QtWidgets.QGridLayout()
        self.TitleBar.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetNoConstraint)
        self.TitleBar.setContentsMargins(0, -1, -1, -1)
        self.TitleBar.setSpacing(0)
        self.TitleBar.setObjectName("TitleBar")
        self.TitleLayout = QtWidgets.QHBoxLayout()
        self.TitleLayout.setContentsMargins(5, 5, 0, 5)
        self.TitleLayout.setSpacing(5)
        self.TitleLayout.setObjectName("TitleLayout")
        self.Logo = QtWidgets.QLabel(parent=Arisu)
        self.Logo.setMouseTracking(False)
        self.Logo.setTabletTracking(False)
        self.Logo.setAcceptDrops(False)
        self.Logo.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.Logo.setText("")
        self.Logo.setPixmap(QtGui.QPixmap(":/Logo/Logo/32.ico"))
        self.Logo.setAlignment(QtCore.Qt.AlignmentFlag.AlignJustify|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.Logo.setObjectName("Logo")
        self.TitleLayout.addWidget(self.Logo)
        self.SoftwareName = QtWidgets.QLabel(parent=Arisu)
        self.SoftwareName.setEnabled(True)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.SoftwareName.setFont(font)
        self.SoftwareName.setMouseTracking(False)
        self.SoftwareName.setTabletTracking(False)
        self.SoftwareName.setAutoFillBackground(False)
        self.SoftwareName.setWordWrap(False)
        self.SoftwareName.setObjectName("SoftwareName")
        self.TitleLayout.addWidget(self.SoftwareName)
        spacerItem = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.TitleLayout.addItem(spacerItem)
        self.TitleBar.addLayout(self.TitleLayout, 0, 0, 2, 1)
        self.WindowControlButtons = QtWidgets.QHBoxLayout()
        self.WindowControlButtons.setSpacing(0)
        self.WindowControlButtons.setObjectName("WindowControlButtons")
        self.hide_btn = QtWidgets.QPushButton(parent=Arisu)
        self.hide_btn.setMouseTracking(True)
        self.hide_btn.setWhatsThis("")
        self.hide_btn.setStyleSheet("QPushButton {\n"
"    background: transparent;  /* 透明背景 */\n"
"    border: none;            /* 移除默认边框 */\n"
"}\n"
"/* 悬停状态 */\n"
"QPushButton:hover {\n"
"    background: rgb(233, 233, 233); /* 轻微高亮 */\n"
"}\n"
"/* 按下状态 */\n"
"QPushButton:pressed {\n"
"    background: rgb(213, 213, 213);\n"
"}")
        self.hide_btn.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/标题栏/标题栏/深度隐藏.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.hide_btn.setIcon(icon)
        self.hide_btn.setIconSize(QtCore.QSize(40, 30))
        self.hide_btn.setObjectName("hide_btn")
        self.WindowControlButtons.addWidget(self.hide_btn)
        self.min_system_tray_btn = QtWidgets.QPushButton(parent=Arisu)
        self.min_system_tray_btn.setMouseTracking(True)
        self.min_system_tray_btn.setStyleSheet("QPushButton {\n"
"    background: transparent;  /* 透明背景 */\n"
"    border:  transparent;            /* 移除默认边框 */\n"
"}\n"
"/* 悬停状态 */\n"
"QPushButton:hover {\n"
"    background: rgb(233, 233, 233); /* 轻微高亮 */\n"
"}\n"
"/* 按下状态 */\n"
"QPushButton:pressed {\n"
"    background: rgb(213, 213, 213);\n"
"}")
        self.min_system_tray_btn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/标题栏/标题栏/托盘隐藏.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.min_system_tray_btn.setIcon(icon1)
        self.min_system_tray_btn.setIconSize(QtCore.QSize(40, 30))
        self.min_system_tray_btn.setObjectName("min_system_tray_btn")
        self.WindowControlButtons.addWidget(self.min_system_tray_btn)
        self.top_btn = QtWidgets.QPushButton(parent=Arisu)
        self.top_btn.setMouseTracking(True)
        self.top_btn.setStyleSheet("QPushButton {\n"
"    background: transparent;  /* 透明背景 */\n"
"    border:  transparent;            /* 移除默认边框 */\n"
"}\n"
"/* 悬停状态 */\n"
"QPushButton:hover {\n"
"    background: rgb(233, 233, 233); /* 轻微高亮 */\n"
"}\n"
"/* 按下状态 */\n"
"QPushButton:pressed {\n"
"    background: rgb(213, 213, 213);\n"
"}")
        self.top_btn.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/标题栏/标题栏/窗口置顶.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.top_btn.setIcon(icon2)
        self.top_btn.setIconSize(QtCore.QSize(40, 30))
        self.top_btn.setObjectName("top_btn")
        self.WindowControlButtons.addWidget(self.top_btn)
        self.min_btn = QtWidgets.QPushButton(parent=Arisu)
        self.min_btn.setMouseTracking(True)
        self.min_btn.setStyleSheet("QPushButton {\n"
"    background: transparent;  /* 透明背景 */\n"
"    border: none;            /* 移除默认边框 */\n"
"}\n"
"/* 悬停状态 */\n"
"QPushButton:hover {\n"
"    background: rgb(233, 233, 233); /* 轻微高亮 */\n"
"}\n"
"/* 按下状态 */\n"
"QPushButton:pressed {\n"
"    background: rgb(213, 213, 213);\n"
"}")
        self.min_btn.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/标题栏/标题栏/最小化.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.min_btn.setIcon(icon3)
        self.min_btn.setIconSize(QtCore.QSize(40, 30))
        self.min_btn.setObjectName("min_btn")
        self.WindowControlButtons.addWidget(self.min_btn)
        self.max_btn = QtWidgets.QPushButton(parent=Arisu)
        self.max_btn.setMouseTracking(True)
        self.max_btn.setStyleSheet("QPushButton {\n"
"    background: transparent;  /* 透明背景 */\n"
"    border: none;            /* 移除默认边框 */\n"
"}\n"
"/* 悬停状态 */\n"
"QPushButton:hover {\n"
"    background: rgb(233, 233, 233); /* 轻微高亮 */\n"
"}\n"
"/* 按下状态 */\n"
"QPushButton:pressed {\n"
"    background: rgb(213, 213, 213);\n"
"}\n"
"")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/标题栏/标题栏/最大化.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.max_btn.setIcon(icon4)
        self.max_btn.setIconSize(QtCore.QSize(40, 30))
        self.max_btn.setCheckable(True)
        self.max_btn.setChecked(False)
        self.max_btn.setAutoRepeat(False)
        self.max_btn.setObjectName("max_btn")
        self.WindowControlButtons.addWidget(self.max_btn)
        self.close_btn = QtWidgets.QPushButton(parent=Arisu)
        self.close_btn.setMouseTracking(True)
        self.close_btn.setStyleSheet("QPushButton {\n"
"    background: transparent;  /* 透明背景 */\n"
"    border:  transparent;            /* 移除默认边框 */\n"
"}\n"
"/* 悬停状态 */\n"
"QPushButton:hover {\n"
"    background: rgb(196, 43, 28); /* 轻微高亮 */\n"
"}\n"
"/* 按下状态 */\n"
"QPushButton:pressed {\n"
"    background: rgb(199, 64, 49);\n"
"}\n"
"")
        self.close_btn.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/标题栏/标题栏/关闭.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.close_btn.setIcon(icon5)
        self.close_btn.setIconSize(QtCore.QSize(40, 30))
        self.close_btn.setObjectName("close_btn")
        self.WindowControlButtons.addWidget(self.close_btn)
        self.TitleBar.addLayout(self.WindowControlButtons, 0, 1, 1, 1)
        self.verticalLayout.addLayout(self.TitleBar)
        self.ModeWidget = QtWidgets.QTabWidget(parent=Arisu)
        self.ModeWidget.setSizeIncrement(QtCore.QSize(0, 0))
        self.ModeWidget.setMouseTracking(False)
        self.ModeWidget.setTabletTracking(False)
        self.ModeWidget.setAcceptDrops(False)
        self.ModeWidget.setToolTip("")
        self.ModeWidget.setWhatsThis("")
        self.ModeWidget.setAutoFillBackground(False)
        self.ModeWidget.setStyleSheet("/* 设置选项卡最小/最大尺寸 */\n"
"QTabBar::tab {\n"
"    border-right:  1px solid rgb(226, 230, 234);  /* 右边框显示颜色 */\n"
"    border-top-left-radius: 10px;    /* 左上角圆角半径 */\n"
"    border-bottom-right-radius: 0px; /* 右下角直角 */\n"
"    min-width: 70px;  /* 最小宽度 */\n"
"    min-height: 50px;  /* 最小高度 */\n"
"}\n"
"\n"
"/* 悬停状态 */\n"
"QTabBar::tab:hover {\n"
"    background:rgb(85, 255, 255);\n"
"    border-radius: 10px;        /*圆角*/\n"
"}\n"
"\n"
"/* 选中状态 */\n"
"QTabBar::tab:selected {\n"
"    border-top-right-radius: 0px;   /* 右上角圆角半径 */\n"
"    border-bottom-left-radius: 0px;  /* 左下角直角 */\n"
"    border-bottom-right-radius: 0px; /* 右下角直角 */\n"
"    background-color: rgba(85, 255, 255,0.3);        /*背景颜色*/\n"
"   color: white;             /* 选中文字色 */\n"
"   border-bottom: 10px solid rgb(85, 255, 255); /* 底部指示条 */\n"
"}")
        self.ModeWidget.setTabPosition(QtWidgets.QTabWidget.TabPosition.West)
        self.ModeWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.ModeWidget.setIconSize(QtCore.QSize(40, 40))
        self.ModeWidget.setUsesScrollButtons(False)
        self.ModeWidget.setDocumentMode(False)
        self.ModeWidget.setTabsClosable(False)
        self.ModeWidget.setMovable(True)
        self.ModeWidget.setTabBarAutoHide(False)
        self.ModeWidget.setObjectName("ModeWidget")
        self.Home = QtWidgets.QWidget()
        self.Home.setStyleSheet("")
        self.Home.setObjectName("Home")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.Home)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.DynamicBackground = QVideoWidget(parent=self.Home)
        self.DynamicBackground.setStyleSheet("QWidget {\n"
"    border-radius: 10px;        /*圆角*/\n"
"    background-color: rgba(85, 255, 255,50);\n"
"}\n"
"")
        self.DynamicBackground.setObjectName("DynamicBackground")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.DynamicBackground)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3.addWidget(self.DynamicBackground)
        self.HomeButton = QtWidgets.QWidget(parent=self.Home)
        self.HomeButton.setStyleSheet("QWidget {\n"
"    border-radius: 10px;        /*圆角*/    \n"
"    background-color: rgb(255, 255, 255);\n"
"    text-align : bottom;    /*文本放在底层*/\n"
"}")
        self.HomeButton.setObjectName("HomeButton")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.HomeButton)
        self.horizontalLayout.setContentsMargins(0, -1, -1, -1)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Function1 = QtWidgets.QToolButton(parent=self.HomeButton)
        font = QtGui.QFont()
        font.setFamily("华文琥珀")
        font.setPointSize(20)
        self.Function1.setFont(font)
        self.Function1.setStyleSheet("QToolButton {\n"
"    background-color: rgb(0, 255, 255);    /*设置背景颜色*/\n"
"    color: rgb(65, 65, 220); /* 设置所有按钮字体为蓝色 */\n"
"    padding-top: 10px;        /*调整内部距离*/\n"
"    padding-left: 10px;        /*调整内部距离*/\n"
"    padding-right: 10px;        /*调整内部距离*/\n"
"    padding-bottom: 10px;    /*调整内部距离*/\n"
"    border: 5px double rgb(65, 65, 220);  /*边框大小、双边框、边框颜色*/\n"
"}\n"
"\n"
"/* ===== 悬停效果 ===== */\n"
"QToolButton:hover {\n"
"    background-color: rgba(0, 255, 255, 0.5);\n"
"    color: rgba(65, 65, 220, 0.5); /* 设置所有按钮字体为蓝色 */    \n"
"}\n"
"\n"
"/* ===== 按下效果 ===== */\n"
"QToolButton:pressed {\n"
"    background-color: rgb(0, 255, 255);\n"
"    color: rgb(255,255,255);\n"
"}")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/爱丽丝表情包/爱丽丝表情包/女仆/1.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Function1.setIcon(icon6)
        self.Function1.setIconSize(QtCore.QSize(100, 100))
        self.Function1.setPopupMode(QtWidgets.QToolButton.ToolButtonPopupMode.DelayedPopup)
        self.Function1.setToolButtonStyle(QtCore.Qt.ToolButtonStyle.ToolButtonTextUnderIcon)
        self.Function1.setAutoRaise(False)
        self.Function1.setArrowType(QtCore.Qt.ArrowType.NoArrow)
        self.Function1.setObjectName("Function1")
        self.horizontalLayout.addWidget(self.Function1)
        self.Function2 = QtWidgets.QToolButton(parent=self.HomeButton)
        font = QtGui.QFont()
        font.setFamily("华文琥珀")
        font.setPointSize(20)
        self.Function2.setFont(font)
        self.Function2.setStyleSheet("QToolButton {\n"
"    background-color: rgb(0, 255, 255);    /*设置背景颜色*/\n"
"    color: rgb(65, 65, 220); /* 设置所有按钮字体为蓝色 */\n"
"    padding-top: 10px;        /*调整内部距离*/\n"
"    padding-left: 10px;        /*调整内部距离*/\n"
"    padding-right: 10px;        /*调整内部距离*/\n"
"    padding-bottom: 10px;    /*调整内部距离*/\n"
"    border: 5px double rgb(65, 65, 220);  /*边框大小、双边框、边框颜色*/\n"
"}\n"
"\n"
"/* ===== 悬停效果 ===== */\n"
"QToolButton:hover {\n"
"    background-color: rgba(0, 255, 255, 0.5);\n"
"    color: rgba(65, 65, 220, 0.5); /* 设置所有按钮字体为蓝色 */    \n"
"}\n"
"\n"
"/* ===== 按下效果 ===== */\n"
"QToolButton:pressed {\n"
"    background-color: rgb(0, 255, 255);\n"
"    color: rgb(255,255,255);\n"
"}")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/爱丽丝表情包/爱丽丝表情包/非女仆/2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Function2.setIcon(icon7)
        self.Function2.setIconSize(QtCore.QSize(100, 100))
        self.Function2.setPopupMode(QtWidgets.QToolButton.ToolButtonPopupMode.DelayedPopup)
        self.Function2.setToolButtonStyle(QtCore.Qt.ToolButtonStyle.ToolButtonTextUnderIcon)
        self.Function2.setAutoRaise(False)
        self.Function2.setArrowType(QtCore.Qt.ArrowType.NoArrow)
        self.Function2.setObjectName("Function2")
        self.horizontalLayout.addWidget(self.Function2)
        self.Function3 = QtWidgets.QToolButton(parent=self.HomeButton)
        font = QtGui.QFont()
        font.setFamily("华文琥珀")
        font.setPointSize(20)
        self.Function3.setFont(font)
        self.Function3.setStyleSheet("QToolButton {\n"
"    background-color: rgb(0, 255, 255);    /*设置背景颜色*/\n"
"    color: rgb(65, 65, 220); /* 设置所有按钮字体为蓝色 */\n"
"    padding-top: 10px;        /*调整内部距离*/\n"
"    padding-left: 10px;        /*调整内部距离*/\n"
"    padding-right: 10px;        /*调整内部距离*/\n"
"    padding-bottom: 10px;    /*调整内部距离*/\n"
"    border: 5px double rgb(65, 65, 220);  /*边框大小、双边框、边框颜色*/\n"
"}\n"
"\n"
"/* ===== 悬停效果 ===== */\n"
"QToolButton:hover {\n"
"    background-color: rgba(0, 255, 255, 0.5);\n"
"    color: rgba(65, 65, 220, 0.5); /* 设置所有按钮字体为蓝色 */    \n"
"}\n"
"\n"
"/* ===== 按下效果 ===== */\n"
"QToolButton:pressed {\n"
"    background-color: rgb(0, 255, 255);\n"
"    color: rgb(255,255,255);\n"
"}")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/爱丽丝表情包/爱丽丝表情包/女仆/7.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Function3.setIcon(icon8)
        self.Function3.setIconSize(QtCore.QSize(100, 100))
        self.Function3.setPopupMode(QtWidgets.QToolButton.ToolButtonPopupMode.DelayedPopup)
        self.Function3.setToolButtonStyle(QtCore.Qt.ToolButtonStyle.ToolButtonTextUnderIcon)
        self.Function3.setAutoRaise(False)
        self.Function3.setArrowType(QtCore.Qt.ArrowType.NoArrow)
        self.Function3.setObjectName("Function3")
        self.horizontalLayout.addWidget(self.Function3)
        self.Function4 = QtWidgets.QToolButton(parent=self.HomeButton)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(20)
        self.Function4.setFont(font)
        self.Function4.setStyleSheet("QToolButton {\n"
"    background-color: rgb(0, 255, 255);    /*设置背景颜色*/\n"
"    text-align : top;    /*文本放在顶层*/\n"
"    color: rgb(65, 65, 220); /* 设置所有按钮字体为蓝色 */\n"
"    padding-top: 10px;        /*调整内部距离*/\n"
"    padding-left: 10px;        /*调整内部距离*/\n"
"    padding-right: 10px;        /*调整内部距离*/\n"
"    border: 5px double rgb(65, 65, 220);  /*边框大小、双边框、边框颜色*/\n"
"}\n"
"\n"
"/* ===== 悬停效果 ===== */\n"
"QToolButton:hover {\n"
"    background-color: rgba(0, 255, 255, 0.5);\n"
"    color: rgba(65, 65, 220, 0.5); /* 设置所有按钮字体为蓝色 */    \n"
"}\n"
"\n"
"/* ===== 按下效果 ===== */\n"
"QToolButton:pressed {\n"
"    background-color: rgb(0, 255, 255);\n"
"    color: rgb(255,255,255);\n"
"}")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/爱丽丝表情包/爱丽丝表情包/非女仆/14.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.Function4.setIcon(icon9)
        self.Function4.setIconSize(QtCore.QSize(100, 100))
        self.Function4.setPopupMode(QtWidgets.QToolButton.ToolButtonPopupMode.DelayedPopup)
        self.Function4.setToolButtonStyle(QtCore.Qt.ToolButtonStyle.ToolButtonTextUnderIcon)
        self.Function4.setAutoRaise(False)
        self.Function4.setArrowType(QtCore.Qt.ArrowType.NoArrow)
        self.Function4.setObjectName("Function4")
        self.horizontalLayout.addWidget(self.Function4)
        self.verticalLayout_3.addWidget(self.HomeButton)
        self.verticalLayout_3.setStretch(0, 1)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/选项卡图标/选项卡图标/主页.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.ModeWidget.addTab(self.Home, icon10, "")
        self.StateMonitor = QtWidgets.QWidget()
        self.StateMonitor.setObjectName("StateMonitor")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.StateMonitor)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.StateTabWidget = QtWidgets.QTabWidget(parent=self.StateMonitor)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        font.setBold(True)
        self.StateTabWidget.setFont(font)
        self.StateTabWidget.setStyleSheet("/* 设置选项卡最小/最大尺寸 */\n"
"QTabBar::tab {\n"
"    border-right:  1px solid rgb(226, 230, 234);  /* 右边框显示颜色 */\n"
"    border-top-left-radius: 10px;    /* 左上角圆角半径 */\n"
"    border-bottom-right-radius: 0px; /* 右下角直角 */\n"
"    min-width: 70px;  /* 最小宽度 */\n"
"    min-height: 30px;  /* 最小高度 */\n"
"}\n"
"\n"
"/* 悬停状态 */\n"
"QTabBar::tab:hover {\n"
"    background:rgba(0, 0, 255,0.5);\n"
"    border-radius: 10px;        /*圆角*/\n"
"}\n"
"\n"
"/* 选中状态 */\n"
"QTabBar::tab:selected {\n"
"    border-top-right-radius: 10px;   /* 右上角圆角半径 */\n"
"    border-bottom-left-radius: 0px;  /* 左下角直角 */\n"
"    border-bottom-right-radius: 0px; /* 右下角直角 */\n"
"    background-color: rgba(0, 0, 255,0.3);\n"
"    color: black;             /* 选中文字色 */\n"
"    border-bottom: 10px solid rgb(0, 0, 255); /* 底部指示条 */\n"
"}")
        self.StateTabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.StateTabWidget.setDocumentMode(True)
        self.StateTabWidget.setTabsClosable(False)
        self.StateTabWidget.setMovable(True)
        self.StateTabWidget.setTabBarAutoHide(False)
        self.StateTabWidget.setObjectName("StateTabWidget")
        self.StateOutput = QtWidgets.QWidget()
        self.StateOutput.setObjectName("StateOutput")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.StateOutput)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.StateScrollAreaTip = QtWidgets.QLabel(parent=self.StateOutput)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(20)
        font.setBold(True)
        self.StateScrollAreaTip.setFont(font)
        self.StateScrollAreaTip.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.StateScrollAreaTip.setObjectName("StateScrollAreaTip")
        self.verticalLayout_10.addWidget(self.StateScrollAreaTip)
        self.StateScrollArea = QtWidgets.QScrollArea(parent=self.StateOutput)
        self.StateScrollArea.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.PreventContextMenu)
        self.StateScrollArea.setStyleSheet("QScrollArea {\n"
"    border-radius:3px;\n"
"}\n"
"\n"
"#scrollArea{\n"
"border: 10px solid #c3c3c3;\n"
"border-radius:15px;\n"
"}\n"
"\n"
"/*设置滚动条背景*/\n"
"QScrollBar:horizontal {\n"
"    border-radius:10px;\n"
"   height: 20px;\n"
"    background-color: rgba(0, 0, 0, 0.1);\n"
"    background: none;        /*没有背景,之前是网格*/\n"
"}\n"
"\n"
"/*设置滑动条*/\n"
"QScrollBar::handle:horizontal {\n"
"   border-radius:10px; \n"
"    background-color: rgb(0, 255, 255);\n"
" }\n"
"\n"
"QScrollBar::sub-line:horizontal,    /*滚动条顶部的按钮*/\n"
"QScrollBar::add-line:horizontal {        /*滚动条底部的按钮*/\n"
"    width: 0px; /*设置按钮大小为0(不显示)*/\n"
"}\n"
"")
        self.StateScrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.StateScrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.StateScrollArea.setWidgetResizable(True)
        self.StateScrollArea.setObjectName("StateScrollArea")
        self.StateWidget = QtWidgets.QWidget()
        self.StateWidget.setGeometry(QtCore.QRect(0, 0, 1186, 556))
        self.StateWidget.setObjectName("StateWidget")
        self.StateWidgetLayout = QtWidgets.QHBoxLayout(self.StateWidget)
        self.StateWidgetLayout.setObjectName("StateWidgetLayout")
        self.StateScrollArea.setWidget(self.StateWidget)
        self.verticalLayout_10.addWidget(self.StateScrollArea)
        self.StateTabWidget.addTab(self.StateOutput, "")
        self.Bind = QtWidgets.QWidget()
        self.Bind.setAutoFillBackground(False)
        self.Bind.setStyleSheet("QWidget {\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-color: rgb(0, 255, 255);\n"
"    border-width: 5px;        /*设置边框大小*/\n"
"}")
        self.Bind.setObjectName("Bind")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.Bind)
        self.horizontalLayout_2.setContentsMargins(40, 20, 40, 20)
        self.horizontalLayout_2.setSpacing(10)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.BindInputLayout = QtWidgets.QVBoxLayout()
        self.BindInputLayout.setContentsMargins(0, 29, 0, -1)
        self.BindInputLayout.setSpacing(10)
        self.BindInputLayout.setObjectName("BindInputLayout")
        self.QQGroupName = QtWidgets.QLineEdit(parent=self.Bind)
        self.QQGroupName.setMinimumSize(QtCore.QSize(309, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(False)
        self.QQGroupName.setFont(font)
        self.QQGroupName.setStyleSheet("QLineEdit {\n"
"border: 3px solid rgb(41, 57, 85); /*边框1px宽，颜色为深紫色*/\n"
"border-radius: 10px; /*边框圆角3px*/\n"
"background: white; /*背景色为白色*/\n"
"selection-background-color: green; /* 文本选中时的背景色*/\n"
"\n"
"}\n"
"/*悬停*/\n"
"QLineEdit:hover {\n"
"    border: 3px solid rgba(0, 0, 0,0.4); /* 鼠标悬停时边框颜色为蓝色*/\n"
"}")
        self.QQGroupName.setInputMask("")
        self.QQGroupName.setText("")
        self.QQGroupName.setFrame(False)
        self.QQGroupName.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.QQGroupName.setReadOnly(False)
        self.QQGroupName.setClearButtonEnabled(True)
        self.QQGroupName.setObjectName("QQGroupName")
        self.BindInputLayout.addWidget(self.QQGroupName)
        self.BotName = QtWidgets.QLineEdit(parent=self.Bind)
        self.BotName.setMinimumSize(QtCore.QSize(309, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(False)
        self.BotName.setFont(font)
        self.BotName.setStyleSheet("QLineEdit {\n"
"border: 3px solid rgb(41, 57, 85); /*边框1px宽，颜色为深紫色*/\n"
"border-radius: 10px; /*边框圆角3px*/\n"
"background: white; /*背景色为白色*/\n"
"selection-background-color: green; /* 文本选中时的背景色*/\n"
"\n"
"}\n"
"/*悬停*/\n"
"QLineEdit:hover {\n"
"    border: 3px solid rgba(0, 0, 0,0.4); /* 鼠标悬停时边框颜色为蓝色*/\n"
"}")
        self.BotName.setInputMask("")
        self.BotName.setText("")
        self.BotName.setFrame(False)
        self.BotName.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        self.BotName.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.BotName.setReadOnly(False)
        self.BotName.setClearButtonEnabled(True)
        self.BotName.setObjectName("BotName")
        self.BindInputLayout.addWidget(self.BotName)
        self.Root = QtWidgets.QLineEdit(parent=self.Bind)
        self.Root.setMinimumSize(QtCore.QSize(309, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(False)
        self.Root.setFont(font)
        self.Root.setStyleSheet("QLineEdit {\n"
"border: 3px solid rgb(41, 57, 85); /*边框1px宽，颜色为深紫色*/\n"
"border-radius: 10px; /*边框圆角3px*/\n"
"background: white; /*背景色为白色*/\n"
"selection-background-color: green; /* 文本选中时的背景色*/\n"
"\n"
"}\n"
"/*悬停*/\n"
"QLineEdit:hover {\n"
"    border: 3px solid rgba(0, 0, 0,0.4); /* 鼠标悬停时边框颜色为蓝色*/\n"
"}")
        self.Root.setInputMask("")
        self.Root.setText("")
        self.Root.setFrame(False)
        self.Root.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        self.Root.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.Root.setReadOnly(False)
        self.Root.setClearButtonEnabled(True)
        self.Root.setObjectName("Root")
        self.BindInputLayout.addWidget(self.Root)
        self.ExitPassword = QtWidgets.QLineEdit(parent=self.Bind)
        self.ExitPassword.setMinimumSize(QtCore.QSize(309, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(False)
        self.ExitPassword.setFont(font)
        self.ExitPassword.setStyleSheet("QLineEdit {\n"
"border: 3px solid rgb(41, 57, 85); /*边框1px宽，颜色为深紫色*/\n"
"border-radius: 10px; /*边框圆角3px*/\n"
"background: white; /*背景色为白色*/\n"
"selection-background-color: green; /* 文本选中时的背景色*/\n"
"\n"
"}\n"
"/*悬停*/\n"
"QLineEdit:hover {\n"
"    border: 3px solid rgba(0, 0, 0,0.4); /* 鼠标悬停时边框颜色为蓝色*/\n"
"}")
        self.ExitPassword.setInputMask("")
        self.ExitPassword.setText("")
        self.ExitPassword.setFrame(False)
        self.ExitPassword.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        self.ExitPassword.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.ExitPassword.setReadOnly(False)
        self.ExitPassword.setClearButtonEnabled(True)
        self.ExitPassword.setObjectName("ExitPassword")
        self.BindInputLayout.addWidget(self.ExitPassword)
        self.InitRole = QtWidgets.QLineEdit(parent=self.Bind)
        self.InitRole.setMinimumSize(QtCore.QSize(309, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(False)
        self.InitRole.setFont(font)
        self.InitRole.setStyleSheet("QLineEdit {\n"
"border: 3px solid rgb(41, 57, 85); /*边框1px宽，颜色为深紫色*/\n"
"border-radius: 10px; /*边框圆角3px*/\n"
"background: white; /*背景色为白色*/\n"
"selection-background-color: green; /* 文本选中时的背景色*/\n"
"\n"
"}\n"
"/*悬停*/\n"
"QLineEdit:hover {\n"
"    border: 3px solid rgba(0, 0, 0,0.4); /* 鼠标悬停时边框颜色为蓝色*/\n"
"}")
        self.InitRole.setInputMask("")
        self.InitRole.setText("")
        self.InitRole.setFrame(False)
        self.InitRole.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        self.InitRole.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.InitRole.setReadOnly(False)
        self.InitRole.setClearButtonEnabled(True)
        self.InitRole.setObjectName("InitRole")
        self.BindInputLayout.addWidget(self.InitRole)
        self.QQGroupLocation = QtWidgets.QLineEdit(parent=self.Bind)
        self.QQGroupLocation.setMinimumSize(QtCore.QSize(309, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(False)
        self.QQGroupLocation.setFont(font)
        self.QQGroupLocation.setStyleSheet("QLineEdit {\n"
"border: 3px solid rgb(41, 57, 85); /*边框1px宽，颜色为深紫色*/\n"
"border-radius: 10px; /*边框圆角3px*/\n"
"background: white; /*背景色为白色*/\n"
"selection-background-color: green; /* 文本选中时的背景色*/\n"
"\n"
"}\n"
"/*悬停*/\n"
"QLineEdit:hover {\n"
"    border: 3px solid rgba(0, 0, 0,0.4); /* 鼠标悬停时边框颜色为蓝色*/\n"
"}")
        self.QQGroupLocation.setInputMask("")
        self.QQGroupLocation.setText("")
        self.QQGroupLocation.setFrame(False)
        self.QQGroupLocation.setEchoMode(QtWidgets.QLineEdit.EchoMode.Normal)
        self.QQGroupLocation.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.QQGroupLocation.setReadOnly(False)
        self.QQGroupLocation.setClearButtonEnabled(True)
        self.QQGroupLocation.setObjectName("QQGroupLocation")
        self.BindInputLayout.addWidget(self.QQGroupLocation)
        self.RemoveDangerousOrder = QtWidgets.QCheckBox(parent=self.Bind)
        self.RemoveDangerousOrder.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        self.RemoveDangerousOrder.setFont(font)
        self.RemoveDangerousOrder.setStyleSheet("/*整体控件 */\n"
"QCheckBox {\n"
"    color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"/*复选框本体*/\n"
"QCheckBox::indicator {\n"
"                width: 24px;\n"
"                height: 24px;\n"
"                border: 3px solid rgb(0,0,0);\n"
"                border-radius: 5px;\n"
"}\n"
"\n"
"/*未选中状态*/\n"
" QCheckBox::indicator:unchecked {\n"
"    background-color: rgb(255,255,255);\n"
"}\n"
"\n"
"/* 选中状态*/\n"
"QCheckBox::indicator:checked {\n"
"    background-color: rgb(85,255,255);\n"
"    border-color: rgb(0, 0, 255);\n"
"}\n"
"")
        self.RemoveDangerousOrder.setTristate(False)
        self.RemoveDangerousOrder.setObjectName("RemoveDangerousOrder")
        self.BindInputLayout.addWidget(self.RemoveDangerousOrder)
        self.AddOrRemoveLayout = QtWidgets.QHBoxLayout()
        self.AddOrRemoveLayout.setObjectName("AddOrRemoveLayout")
        self.AddOrChangeQQGroup = QtWidgets.QPushButton(parent=self.Bind)
        self.AddOrChangeQQGroup.setMinimumSize(QtCore.QSize(0, 40))
        self.AddOrChangeQQGroup.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.AddOrChangeQQGroup.setFont(font)
        self.AddOrChangeQQGroup.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(0,255,0);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(0, 255, 0);\n"
"    /*background-color: rgba(0, 255, 0,0.1);    */\n"
"    background-color: rgb(255,255,255)/*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(0, 255, 0,0.3);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(0, 255, 0);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.AddOrChangeQQGroup.setAutoRepeat(False)
        self.AddOrChangeQQGroup.setAutoDefault(False)
        self.AddOrChangeQQGroup.setDefault(False)
        self.AddOrChangeQQGroup.setFlat(False)
        self.AddOrChangeQQGroup.setObjectName("AddOrChangeQQGroup")
        self.AddOrRemoveLayout.addWidget(self.AddOrChangeQQGroup)
        self.RemoveQQGroup = QtWidgets.QPushButton(parent=self.Bind)
        self.RemoveQQGroup.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.RemoveQQGroup.setFont(font)
        self.RemoveQQGroup.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(255, 0, 0);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgba(255, 0, 0,0.5);\n"
"    background-color: rgb(255, 255, 255);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(255, 0, 0,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"    border-color: rgb(255, 0, 0);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(255, 0, 0);\n"
"    color: rgb(255, 255, 255);\n"
"    border-color: rgb(255, 0, 0);  /*边框颜色*/\n"
"}\n"
"")
        self.RemoveQQGroup.setObjectName("RemoveQQGroup")
        self.AddOrRemoveLayout.addWidget(self.RemoveQQGroup)
        self.BindInputLayout.addLayout(self.AddOrRemoveLayout)
        spacerItem1 = QtWidgets.QSpacerItem(13, 13, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.BindInputLayout.addItem(spacerItem1)
        self.SwitchReply = QtWidgets.QPushButton(parent=self.Bind)
        self.SwitchReply.setMinimumSize(QtCore.QSize(0, 40))
        self.SwitchReply.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.SwitchReply.setFont(font)
        self.SwitchReply.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(0, 85, 255);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(0, 85, 255);\n"
"    background-color: rgba(0, 85, 255,0.1);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(0, 85, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(0, 85, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.SwitchReply.setObjectName("SwitchReply")
        self.BindInputLayout.addWidget(self.SwitchReply)
        self.horizontalLayout_2.addLayout(self.BindInputLayout)
        self.QQGroupListState = QtWidgets.QGroupBox(parent=self.Bind)
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(20)
        font.setBold(True)
        self.QQGroupListState.setFont(font)
        self.QQGroupListState.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.QQGroupListState.setFlat(False)
        self.QQGroupListState.setObjectName("QQGroupListState")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.QQGroupListState)
        self.verticalLayout_8.setContentsMargins(0, 30, 0, 0)
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.QQGroupList = QtWidgets.QListWidget(parent=self.QQGroupListState)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.QQGroupList.setFont(font)
        self.QQGroupList.setStyleSheet("/* 设置整个列表控件的样式 */\n"
"QListWidget {\n"
"    outline: none;                    /* 移除选项前的焦点虚线框 */\n"
"    border: 3px solid rgb(0, 0, 0);  /* 边框大小、边框、边框颜色 */\n"
"    border-radius: 7px;               /* 圆角 */\n"
"    background-image: url(:/背景/背景/充能.jpg);\n"
"    background-size: cover; /* 保持比例，裁剪溢出部分 */\n"
"}\n"
"\n"
"/* 列表项默认样式*/\n"
"QListWidget::item {\n"
"    background-color: rgb(255,255,255); /* 普通行背景色 */\n"
"    border-bottom: 2px solid rgba(0,0,0,0.1); /* 底部边框 */\n"
"    color: rgb(0,0,0);                /* 文字颜色 */\n"
"    height: 40px;                     /* 项高度 */\n"
"    padding-left: 10px;               /* 左内边距 */\n"
"}\n"
"\n"
"/* 列表项悬停样式 */\n"
"QListWidget::item:hover {\n"
"    background-color: rgb(245, 245, 245);/* 选中背景色 */\n"
"    color: rgb(0,0,0);                   /* 悬停文字颜色 */\n"
"}\n"
"\n"
"/* 列表项选中样式 */\n"
"QListWidget::item:selected {\n"
"    background-color: rgb(228, 232, 237);        /* 悬停背景色 */\n"
"    color: rgb(0,0,0);                     /* 选中文字颜色 */\n"
"}\n"
"\n"
"/* 列表项选中且非焦点状态 */\n"
"QListWidget::item:selected:!active {\n"
"    background-color: rgb(228, 232, 237);        /* 悬停背景色 */\n"
"    color: rgb(0,0,0);                     /* 选中文字颜色 */\n"
"}\n"
"\n"
"/* 滚动条样式 */\n"
"QScrollBar:vertical {\n"
"    width: 10px;                      /* 垂直滚动条宽度 */\n"
"    background-color: rgba(0, 0, 0, 0.1);\n"
"}\n"
" /* 滚动条手柄*/\n"
"QScrollBar::handle:vertical {\n"
"    background: rgba(0, 0, 0, 0.2);              /* 滚动条手柄颜色 */\n"
"    min-height: 10px;                    /*最小宽度*/\n"
"    border-radius: 5px;    /*圆角大小*/\n"
"}\n"
"\n"
"QScrollBar::add-line:vertical {\n"
"    background: none;\n"
"}\n"
"QScrollBar::sub-line:vertical {\n"
"    background: none;\n"
"}")
        self.QQGroupList.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.QQGroupList.setDragDropMode(QtWidgets.QAbstractItemView.DragDropMode.InternalMove)
        self.QQGroupList.setAlternatingRowColors(False)
        self.QQGroupList.setFlow(QtWidgets.QListView.Flow.TopToBottom)
        self.QQGroupList.setViewMode(QtWidgets.QListView.ViewMode.ListMode)
        self.QQGroupList.setObjectName("QQGroupList")
        self.verticalLayout_8.addWidget(self.QQGroupList)
        self.horizontalLayout_2.addWidget(self.QQGroupListState)
        self.horizontalLayout_2.setStretch(1, 1)
        self.StateTabWidget.addTab(self.Bind, "")
        self.verticalLayout_7.addWidget(self.StateTabWidget)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/选项卡图标/选项卡图标/状态监控.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.ModeWidget.addTab(self.StateMonitor, icon11, "")
        self.KeyboardShortcut = QtWidgets.QWidget()
        self.KeyboardShortcut.setStyleSheet("QWidget {\n"
"    background-color: rgb(255, 255, 255);\n"
"}")
        self.KeyboardShortcut.setObjectName("KeyboardShortcut")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.KeyboardShortcut)
        self.verticalLayout_5.setContentsMargins(70, 20, 70, 0)
        self.verticalLayout_5.setSpacing(10)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.KeyboardShortcutLabel = QtWidgets.QLabel(parent=self.KeyboardShortcut)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(20)
        font.setBold(True)
        self.KeyboardShortcutLabel.setFont(font)
        self.KeyboardShortcutLabel.setStyleSheet("color: rgba(0, 0, 0,0.7);")
        self.KeyboardShortcutLabel.setObjectName("KeyboardShortcutLabel")
        self.verticalLayout_5.addWidget(self.KeyboardShortcutLabel)
        self.KeyboardShortcutTip = QtWidgets.QLabel(parent=self.KeyboardShortcut)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        self.KeyboardShortcutTip.setFont(font)
        self.KeyboardShortcutTip.setStyleSheet("color: rgb(131, 131, 131);")
        self.KeyboardShortcutTip.setObjectName("KeyboardShortcutTip")
        self.verticalLayout_5.addWidget(self.KeyboardShortcutTip)
        self.HotkeySelections = QtWidgets.QScrollArea(parent=self.KeyboardShortcut)
        self.HotkeySelections.setStyleSheet("QScrollArea {\n"
"    border: 5px solid rgb(240, 244, 249);  /*边框大小、边框样式、边框颜色*/\n"
"    border-radius:20px;         /*圆角*/\n"
"    background-color: rgb(240, 244, 249); /*背景色*/\n"
"}\n"
"/*设置垂直滚动条*/\n"
"QScrollBar:vertical {\n"
"    padding-top: 10px;        /*调整内部距离*/\n"
"    padding-bottom: 10px;    /*调整内部距离*/\n"
"    border-radius:10px; /*滚动条整体圆角*/\n"
"    width: 7px;    /*滚动条整体宽度*/\n"
"    background: none;        /*滚动条没有背景,之前是网格*/\n"
"}\n"
"\n"
"/*设置垂直滑动条手柄*/\n"
"QScrollBar::handle:vertical {\n"
"   border-radius:3px; \n"
"    background-color: rgb(0, 255, 255);    /*背景颜色*/\n"
"}\n"
"\n"
"/*手柄悬停颜色*/\n"
"QScrollBar::handle:vertical:hover {\n"
"    background-color: rgba(0, 255, 255,0.3);        /*背景颜色*/\n"
"}\n"
"\n"
"/*垂直滚动条顶部和底部的按钮*/\n"
"QScrollBar::add-line:vertical,\n"
"QScrollBar::sub-line:vertical {\n"
"    height: 0px; /*设置按钮大小为0(不显示)*/\n"
"}\n"
"\n"
"/*垂直滚动条未覆盖的区域*/\n"
"QScrollBar::add-page:vertical,\n"
"QScrollBar::sub-page:vertical, {\n"
"    background-color: rgba(240, 244, 249,1); /*背景色*/\n"
"}\n"
"\n"
"\n"
"")
        self.HotkeySelections.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.HotkeySelections.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.HotkeySelections.setWidgetResizable(True)
        self.HotkeySelections.setObjectName("HotkeySelections")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1047, 1000))
        self.scrollAreaWidgetContents.setMinimumSize(QtCore.QSize(0, 1000))
        self.scrollAreaWidgetContents.setStyleSheet("/*可视窗口背景*/\n"
"QWidget {\n"
"    background-color: rgb(240, 244, 249);\n"
"}")
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.SwitchReply_2 = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.SwitchReply_2.setMinimumSize(QtCore.QSize(0, 40))
        self.SwitchReply_2.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.SwitchReply_2.setFont(font)
        self.SwitchReply_2.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(0, 85, 255);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(0, 85, 255);\n"
"    background-color: rgba(0, 85, 255,0.1);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(0, 85, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(0, 85, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.SwitchReply_2.setObjectName("SwitchReply_2")
        self.verticalLayout_6.addWidget(self.SwitchReply_2)
        self.SwitchReply_3 = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.SwitchReply_3.setMinimumSize(QtCore.QSize(0, 40))
        self.SwitchReply_3.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.SwitchReply_3.setFont(font)
        self.SwitchReply_3.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(0, 85, 255);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(0, 85, 255);\n"
"    background-color: rgba(0, 85, 255,0.1);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(0, 85, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(0, 85, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.SwitchReply_3.setObjectName("SwitchReply_3")
        self.verticalLayout_6.addWidget(self.SwitchReply_3)
        self.SwitchReply_4 = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.SwitchReply_4.setMinimumSize(QtCore.QSize(0, 40))
        self.SwitchReply_4.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.SwitchReply_4.setFont(font)
        self.SwitchReply_4.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(0, 85, 255);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(0, 85, 255);\n"
"    background-color: rgba(0, 85, 255,0.1);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(0, 85, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(0, 85, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.SwitchReply_4.setObjectName("SwitchReply_4")
        self.verticalLayout_6.addWidget(self.SwitchReply_4)
        self.SwitchReply_5 = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.SwitchReply_5.setMinimumSize(QtCore.QSize(0, 40))
        self.SwitchReply_5.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.SwitchReply_5.setFont(font)
        self.SwitchReply_5.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(0, 85, 255);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(0, 85, 255);\n"
"    background-color: rgba(0, 85, 255,0.1);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(0, 85, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(0, 85, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.SwitchReply_5.setObjectName("SwitchReply_5")
        self.verticalLayout_6.addWidget(self.SwitchReply_5)
        self.SwitchReply_6 = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.SwitchReply_6.setMinimumSize(QtCore.QSize(0, 40))
        self.SwitchReply_6.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.SwitchReply_6.setFont(font)
        self.SwitchReply_6.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(0, 85, 255);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(0, 85, 255);\n"
"    background-color: rgba(0, 85, 255,0.1);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(0, 85, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(0, 85, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.SwitchReply_6.setObjectName("SwitchReply_6")
        self.verticalLayout_6.addWidget(self.SwitchReply_6)
        self.SwitchReply_7 = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.SwitchReply_7.setMinimumSize(QtCore.QSize(0, 40))
        self.SwitchReply_7.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.SwitchReply_7.setFont(font)
        self.SwitchReply_7.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(0, 85, 255);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(0, 85, 255);\n"
"    background-color: rgba(0, 85, 255,0.1);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(0, 85, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(0, 85, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.SwitchReply_7.setObjectName("SwitchReply_7")
        self.verticalLayout_6.addWidget(self.SwitchReply_7)
        self.SwitchReply_8 = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents)
        self.SwitchReply_8.setMinimumSize(QtCore.QSize(0, 40))
        self.SwitchReply_8.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.SwitchReply_8.setFont(font)
        self.SwitchReply_8.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(0, 85, 255);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(0, 85, 255);\n"
"    background-color: rgba(0, 85, 255,0.1);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(0, 85, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(0, 85, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.SwitchReply_8.setObjectName("SwitchReply_8")
        self.verticalLayout_6.addWidget(self.SwitchReply_8)
        self.HotkeySelections.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_5.addWidget(self.HotkeySelections)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(":/选项卡图标/选项卡图标/热键.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.ModeWidget.addTab(self.KeyboardShortcut, icon12, "")
        self.QuestionLinks = QtWidgets.QWidget()
        self.QuestionLinks.setStyleSheet("QWidget {\n"
"    border-radius: 10px;        /*圆角*/\n"
"    background-color: rgb(255, 255, 255);\n"
"}")
        self.QuestionLinks.setObjectName("QuestionLinks")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.QuestionLinks)
        self.verticalLayout_2.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.QuestionLinksBackground = QtWidgets.QLabel(parent=self.QuestionLinks)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.QuestionLinksBackground.sizePolicy().hasHeightForWidth())
        self.QuestionLinksBackground.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(20)
        self.QuestionLinksBackground.setFont(font)
        self.QuestionLinksBackground.setAcceptDrops(False)
        self.QuestionLinksBackground.setAutoFillBackground(False)
        self.QuestionLinksBackground.setStyleSheet("QLabel {\n"
"    border-radius: 10px;        /*圆角*/    \n"
"    background-color: rgb(255, 255, 255);\n"
"}")
        self.QuestionLinksBackground.setTextFormat(QtCore.Qt.TextFormat.RichText)
        self.QuestionLinksBackground.setScaledContents(False)
        self.QuestionLinksBackground.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.QuestionLinksBackground.setWordWrap(True)
        self.QuestionLinksBackground.setOpenExternalLinks(True)
        self.QuestionLinksBackground.setObjectName("QuestionLinksBackground")
        self.verticalLayout_2.addWidget(self.QuestionLinksBackground)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/选项卡图标/选项卡图标/问题链接.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.ModeWidget.addTab(self.QuestionLinks, icon13, "")
        self.Settings = QtWidgets.QWidget()
        self.Settings.setObjectName("Settings")
        self.InitialInterfaceLocationComboBox = QtWidgets.QComboBox(parent=self.Settings)
        self.InitialInterfaceLocationComboBox.setGeometry(QtCore.QRect(340, 310, 141, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.InitialInterfaceLocationComboBox.setFont(font)
        self.InitialInterfaceLocationComboBox.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 1px solid gray;   /* 边框 */\n"
"    border-radius:2px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color:rgb(0,0,0);/*字体颜色*/\n"
"    /*font: normal normal 15px \"Microsoft YaHei\";*/\n"
"    background: transparent;\n"
"    text-align: AlignHCenter;\n"
"/*    background-color: transparent;*/\n"
"/*    background-color: rgb(0, 255, 255);*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体样式 */\n"
"QComboBox QAbstractItemView {\n"
"    outline: 0px solid gray;   /* 选定项的虚框 */\n"
"    border-radius:10px;   /* 圆角 */\n"
"    padding-top:10px;    /*上下都留10px，是因为选中项是矩形，如果不留，移动到第一项和最后一项会变为直角，不好看*/\n"
"    padding-bottom:10px;\n"
" \n"
"    color:rgb(0,0,0);/*字体颜色*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体每项的样式 */\n"
"QComboBox QAbstractItemView::item {\n"
" \n"
"    min-height: 26px;/*每项高度*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体越过每项的样式 */\n"
"QComboBox QAbstractItemView::item:hover {\n"
"    color:rgba(0,0,0,0.5);/*字体颜色*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体被选择的每项的样式 */\n"
"QComboBox QAbstractItemView::item:selected {\n"
"     color: rgba(51,51,51,1);\n"
"    border-radius:2px;   /* 圆角 */\n"
"}")
        self.InitialInterfaceLocationComboBox.setObjectName("InitialInterfaceLocationComboBox")
        self.InitialInterfaceLocationComboBox.addItem("")
        self.InitialInterfaceLocationComboBox.addItem("")
        self.InitialInterfaceLocationComboBox.addItem("")
        self.InitialInterfaceLocationComboBox.addItem("")
        self.InitialInterfaceLocationComboBox.addItem("")
        self.APIKeyState = QtWidgets.QGroupBox(parent=self.Settings)
        self.APIKeyState.setGeometry(QtCore.QRect(20, 20, 481, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.APIKeyState.setFont(font)
        self.APIKeyState.setStyleSheet("QGroupBox {\n"
"    border: none;            /*无边框*/\n"
"    color: rgb(0, 255, 0);\n"
"}")
        self.APIKeyState.setTitle("")
        self.APIKeyState.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTop|QtCore.Qt.AlignmentFlag.AlignTrailing)
        self.APIKeyState.setFlat(False)
        self.APIKeyState.setCheckable(False)
        self.APIKeyState.setObjectName("APIKeyState")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.APIKeyState)
        self.horizontalLayout_3.setContentsMargins(0, 16, 15, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.APIKeyInput = QtWidgets.QLineEdit(parent=self.APIKeyState)
        self.APIKeyInput.setMinimumSize(QtCore.QSize(309, 40))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(17)
        font.setBold(True)
        self.APIKeyInput.setFont(font)
        self.APIKeyInput.setStyleSheet("QLineEdit {\n"
"    border: 3px solid rgb(41, 57, 85); /*边框1px宽，颜色为深紫色*/\n"
"    border-radius: 10px; /*边框圆角3px*/\n"
"    background: white; /*背景色为白色*/\n"
"    selection-background-color: green; /* 文本选中时的背景色*/\n"
"}\n"
"/*悬停*/\n"
"QLineEdit:hover {\n"
"    border: 3px solid rgba(0, 0, 0,0.4); /* 鼠标悬停时边框颜色为蓝色*/\n"
"}\n"
"\n"
"/*密码模式的颜色*/\n"
"QLineEdit[echoMode=\"2\"] {\n"
"    color: rgb(0,0, 0);\n"
"}")
        self.APIKeyInput.setInputMask("")
        self.APIKeyInput.setText("")
        self.APIKeyInput.setFrame(False)
        self.APIKeyInput.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
        self.APIKeyInput.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.APIKeyInput.setReadOnly(False)
        self.APIKeyInput.setClearButtonEnabled(True)
        self.APIKeyInput.setObjectName("APIKeyInput")
        self.horizontalLayout_3.addWidget(self.APIKeyInput)
        self.APIKeyConfirm = QtWidgets.QPushButton(parent=self.APIKeyState)
        self.APIKeyConfirm.setMinimumSize(QtCore.QSize(70, 40))
        self.APIKeyConfirm.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.APIKeyConfirm.setFont(font)
        self.APIKeyConfirm.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(77, 107, 254);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(77, 107, 254);\n"
"    background-color: rgba(77, 107, 254,0.2);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(77, 107, 254,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(77, 107, 254);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.APIKeyConfirm.setAutoRepeat(False)
        self.APIKeyConfirm.setAutoDefault(False)
        self.APIKeyConfirm.setDefault(False)
        self.APIKeyConfirm.setFlat(False)
        self.APIKeyConfirm.setObjectName("APIKeyConfirm")
        self.horizontalLayout_3.addWidget(self.APIKeyConfirm)
        self.Uninstall = QtWidgets.QPushButton(parent=self.Settings)
        self.Uninstall.setGeometry(QtCore.QRect(350, 400, 130, 40))
        self.Uninstall.setMinimumSize(QtCore.QSize(130, 40))
        self.Uninstall.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.Uninstall.setFont(font)
        self.Uninstall.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(255, 0, 0);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(255, 0, 0);\n"
"    background-color: rgba(255, 0, 0,0.2);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(255, 0, 0,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(255, 0, 0);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.Uninstall.setAutoRepeat(False)
        self.Uninstall.setAutoDefault(False)
        self.Uninstall.setDefault(False)
        self.Uninstall.setFlat(False)
        self.Uninstall.setObjectName("Uninstall")
        self.ConsolePrint = QtWidgets.QTextBrowser(parent=self.Settings)
        self.ConsolePrint.setGeometry(QtCore.QRect(500, 20, 681, 621))
        font = QtGui.QFont()
        font.setFamily("Cascadia Mono")
        font.setPointSize(12)
        self.ConsolePrint.setFont(font)
        self.ConsolePrint.setStyleSheet("QScrollBar:vertical{\n"
"\n"
"margin:16px 0px 16px 0px;\n"
"\n"
"background-color:rgb(11,54,117);\n"
"\n"
"border:0px;\n"
"\n"
"width:14px;\n"
"\n"
"}\n"
"\n"
"QScrollBar::handle:vertical{\n"
"\n"
"background-color:rgba(59,103,168,190);\n"
"\n"
"border-radius:7px;\n"
"\n"
"width:13px;\n"
"\n"
"}\n"
"\n"
"QScrollBar::handle:vertical:hover{\n"
"\n"
"background-color:rgba(59,103,168,220);\n"
"\n"
"}\n"
"\n"
"QScrollBar::sub-line:vertical{\n"
"\n"
"subcontrol-position:top;\n"
"\n"
"subcontrol-origin:margin;\n"
"\n"
"background-color:rgb(11,54,117);\n"
"\n"
"border:1px solid rgb(11,54,117);\n"
"\n"
"height:16px;\n"
"\n"
"}\n"
"\n"
"QScrollBar::add-line:vertical{\n"
"\n"
"subcontrol-position:bottom;\n"
"\n"
"subcontrol-origin:margin;\n"
"\n"
"background-color:rgb(11,54,117);\n"
"\n"
"border:1px solid rgb(11,54,117);\n"
"\n"
"height:16px;\n"
"\n"
"}\n"
"\n"
"QScrollBar::up-arrow:vertical{\n"
"\n"
"border-image:url(:/commonImg/Resources/image/common/arrowUp.png);\n"
"\n"
"width:12px;\n"
"\n"
"height:6px;\n"
"\n"
"}\n"
"\n"
"QScrollBar::down-arrow:vertical{\n"
"\n"
"border-image:url(:/commonImg/Resources/image/common/arrowDown.png);\n"
"\n"
"width:12px;\n"
"\n"
"height:6px;\n"
"\n"
"}\n"
"\n"
"QScrollBar::sub-page:vertical,QScrollBar::add-page:vertical{\n"
"\n"
"background-color:rgb(11,54,117);\n"
"}")
        self.ConsolePrint.setObjectName("ConsolePrint")
        self.LogicCPUCountState = QtWidgets.QGroupBox(parent=self.Settings)
        self.LogicCPUCountState.setGeometry(QtCore.QRect(80, 100, 401, 71))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.LogicCPUCountState.setFont(font)
        self.LogicCPUCountState.setStyleSheet("QGroupBox {\n"
"    border: none;            /*无边框*/\n"
"    color: rgb(0, 255, 0);\n"
"}")
        self.LogicCPUCountState.setTitle("")
        self.LogicCPUCountState.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)
        self.LogicCPUCountState.setFlat(False)
        self.LogicCPUCountState.setCheckable(False)
        self.LogicCPUCountState.setObjectName("LogicCPUCountState")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.LogicCPUCountState)
        self.horizontalLayout_5.setContentsMargins(0, 16, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.LogicCPUCount = QtWidgets.QLineEdit(parent=self.LogicCPUCountState)
        self.LogicCPUCount.setMinimumSize(QtCore.QSize(309, 40))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(17)
        font.setBold(True)
        self.LogicCPUCount.setFont(font)
        self.LogicCPUCount.setStyleSheet("QLineEdit {\n"
"    border: 3px solid rgb(41, 57, 85); /*边框1px宽，颜色为深紫色*/\n"
"    border-radius: 10px; /*边框圆角3px*/\n"
"    background: white; /*背景色为白色*/\n"
"    selection-background-color: green; /* 文本选中时的背景色*/\n"
"}\n"
"/*悬停*/\n"
"QLineEdit:hover {\n"
"    border: 3px solid rgba(0, 0, 0,0.4); /* 鼠标悬停时边框颜色为蓝色*/\n"
"}\n"
"\n"
"/*正常模式的颜色*/\n"
"QLineEdit[echoMode=\"0\"] {\n"
"    color: rgb(0,0, 0);\n"
"}")
        self.LogicCPUCount.setInputMask("")
        self.LogicCPUCount.setText("")
        self.LogicCPUCount.setFrame(False)
        self.LogicCPUCount.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.LogicCPUCount.setReadOnly(False)
        self.LogicCPUCount.setClearButtonEnabled(True)
        self.LogicCPUCount.setObjectName("LogicCPUCount")
        self.horizontalLayout_5.addWidget(self.LogicCPUCount)
        self.LogicCPUCountConfirm = QtWidgets.QPushButton(parent=self.LogicCPUCountState)
        self.LogicCPUCountConfirm.setMinimumSize(QtCore.QSize(70, 40))
        self.LogicCPUCountConfirm.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.LogicCPUCountConfirm.setFont(font)
        self.LogicCPUCountConfirm.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(77, 107, 254);  /*边框颜色*/\n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(77, 107, 254);\n"
"    background-color: rgba(77, 107, 254,0.2);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(77, 107, 254,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(77, 107, 254);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.LogicCPUCountConfirm.setAutoRepeat(False)
        self.LogicCPUCountConfirm.setAutoDefault(False)
        self.LogicCPUCountConfirm.setDefault(False)
        self.LogicCPUCountConfirm.setFlat(False)
        self.LogicCPUCountConfirm.setObjectName("LogicCPUCountConfirm")
        self.horizontalLayout_5.addWidget(self.LogicCPUCountConfirm)
        self.RestoreNavigationBarSortingButton = QtWidgets.QPushButton(parent=self.Settings)
        self.RestoreNavigationBarSortingButton.setGeometry(QtCore.QRect(170, 190, 309, 101))
        self.RestoreNavigationBarSortingButton.setMinimumSize(QtCore.QSize(0, 40))
        self.RestoreNavigationBarSortingButton.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.RestoreNavigationBarSortingButton.setFont(font)
        self.RestoreNavigationBarSortingButton.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(80, 180, 255);  /*边框颜色*/\n"
"    \n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(80, 180, 255);\n"
"    background-color: rgba(80, 180, 255,0.3);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(80, 180, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(80, 180, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.RestoreNavigationBarSortingButton.setObjectName("RestoreNavigationBarSortingButton")
        self.scrollArea = QtWidgets.QScrollArea(parent=self.Settings)
        self.scrollArea.setGeometry(QtCore.QRect(110, 410, 231, 151))
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, -59, 217, 196))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents_2)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.RestoreNavigationBarSortingButton_2 = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents_2)
        self.RestoreNavigationBarSortingButton_2.setMinimumSize(QtCore.QSize(0, 40))
        self.RestoreNavigationBarSortingButton_2.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.RestoreNavigationBarSortingButton_2.setFont(font)
        self.RestoreNavigationBarSortingButton_2.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(80, 180, 255);  /*边框颜色*/\n"
"    \n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(80, 180, 255);\n"
"    background-color: rgba(80, 180, 255,0.3);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(80, 180, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(80, 180, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.RestoreNavigationBarSortingButton_2.setObjectName("RestoreNavigationBarSortingButton_2")
        self.verticalLayout_9.addWidget(self.RestoreNavigationBarSortingButton_2)
        self.RestoreNavigationBarSortingButton_3 = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents_2)
        self.RestoreNavigationBarSortingButton_3.setMinimumSize(QtCore.QSize(0, 40))
        self.RestoreNavigationBarSortingButton_3.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.RestoreNavigationBarSortingButton_3.setFont(font)
        self.RestoreNavigationBarSortingButton_3.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(80, 180, 255);  /*边框颜色*/\n"
"    \n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(80, 180, 255);\n"
"    background-color: rgba(80, 180, 255,0.3);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(80, 180, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(80, 180, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.RestoreNavigationBarSortingButton_3.setObjectName("RestoreNavigationBarSortingButton_3")
        self.verticalLayout_9.addWidget(self.RestoreNavigationBarSortingButton_3)
        self.RestoreNavigationBarSortingButton_4 = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents_2)
        self.RestoreNavigationBarSortingButton_4.setMinimumSize(QtCore.QSize(0, 40))
        self.RestoreNavigationBarSortingButton_4.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.RestoreNavigationBarSortingButton_4.setFont(font)
        self.RestoreNavigationBarSortingButton_4.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(80, 180, 255);  /*边框颜色*/\n"
"    \n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(80, 180, 255);\n"
"    background-color: rgba(80, 180, 255,0.3);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(80, 180, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(80, 180, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.RestoreNavigationBarSortingButton_4.setObjectName("RestoreNavigationBarSortingButton_4")
        self.verticalLayout_9.addWidget(self.RestoreNavigationBarSortingButton_4)
        self.RestoreNavigationBarSortingButton_5 = QtWidgets.QPushButton(parent=self.scrollAreaWidgetContents_2)
        self.RestoreNavigationBarSortingButton_5.setMinimumSize(QtCore.QSize(0, 40))
        self.RestoreNavigationBarSortingButton_5.setSizeIncrement(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(17)
        font.setBold(True)
        self.RestoreNavigationBarSortingButton_5.setFont(font)
        self.RestoreNavigationBarSortingButton_5.setStyleSheet("/**正常情况下样式**/\n"
"QPushButton{\n"
"    border-radius: 10px;        /*圆角*/\n"
"    border-width: 3px;        /*设置边框大小*/\n"
"    border-color: rgb(80, 180, 255);  /*边框颜色*/\n"
"    \n"
"    border-style: solid;        /*实线*/\n"
"    color: rgb(80, 180, 255);\n"
"    background-color: rgba(80, 180, 255,0.3);    /*按钮背景颜色纯白*/\n"
"}\n"
"\n"
"/**鼠标停留在按钮上的样式**/\n"
"QPushButton::hover{    \n"
"    background-color: rgba(80, 180, 255,0.5);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"/**鼠标按压下去的样式**/\n"
"QPushButton:pressed {\n"
"    background-color: rgb(80, 180, 255);\n"
"    color: rgb(255, 255, 255);\n"
"}\n"
"")
        self.RestoreNavigationBarSortingButton_5.setObjectName("RestoreNavigationBarSortingButton_5")
        self.verticalLayout_9.addWidget(self.RestoreNavigationBarSortingButton_5)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents_2)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(":/选项卡图标/选项卡图标/用户设置.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.ModeWidget.addTab(self.Settings, icon14, "")
        self.verticalLayout.addWidget(self.ModeWidget)

        self.retranslateUi(Arisu)
        self.ModeWidget.setCurrentIndex(2)
        self.StateTabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Arisu)

    def retranslateUi(self, Arisu):
        _translate = QtCore.QCoreApplication.translate
        Arisu.setWindowTitle(_translate("Arisu", "Form"))
        self.SoftwareName.setText(_translate("Arisu", "爱丽丝QQ聊天AI 1.0.0"))
        self.hide_btn.setToolTip(_translate("Arisu", "深度隐藏（去任务管理器找）"))
        self.min_system_tray_btn.setToolTip(_translate("Arisu", "隐藏到托盘"))
        self.top_btn.setToolTip(_translate("Arisu", "窗口置顶"))
        self.min_btn.setToolTip(_translate("Arisu", "最小化"))
        self.max_btn.setToolTip(_translate("Arisu", "最大化/恢复"))
        self.close_btn.setToolTip(_translate("Arisu", "关闭"))
        self.Function1.setText(_translate("Arisu", "一键开启"))
        self.Function2.setText(_translate("Arisu", "基础配置"))
        self.Function3.setText(_translate("Arisu", "文档链接"))
        self.Function4.setText(_translate("Arisu", "✨Star"))
        self.ModeWidget.setTabToolTip(self.ModeWidget.indexOf(self.Home), _translate("Arisu", "主页"))
        self.StateScrollAreaTip.setText(_translate("Arisu", "状态监听"))
        self.StateTabWidget.setTabText(self.StateTabWidget.indexOf(self.StateOutput), _translate("Arisu", "状态输出"))
        self.QQGroupName.setPlaceholderText(_translate("Arisu", "请输入Q群名(优先备注名)"))
        self.BotName.setPlaceholderText(_translate("Arisu", "机器人名字(优先群内备注名)"))
        self.Root.setPlaceholderText(_translate("Arisu", "最高权限者(只能有一个)"))
        self.ExitPassword.setPlaceholderText(_translate("Arisu", "退出指令的密码(不能为空)"))
        self.InitRole.setPlaceholderText(_translate("Arisu", "初始人设(不填默认爱丽丝)"))
        self.QQGroupLocation.setPlaceholderText(_translate("Arisu", "Q群窗口的位置(不填默认0,0)"))
        self.RemoveDangerousOrder.setText(_translate("Arisu", "移除危险指令"))
        self.AddOrChangeQQGroup.setText(_translate("Arisu", "添加或修改"))
        self.RemoveQQGroup.setText(_translate("Arisu", "移除Q群"))
        self.SwitchReply.setText(_translate("Arisu", "开启自动回复"))
        self.QQGroupListState.setTitle(_translate("Arisu", "需要回复的QQ群"))
        self.QQGroupList.setSortingEnabled(False)
        self.StateTabWidget.setTabText(self.StateTabWidget.indexOf(self.Bind), _translate("Arisu", "Q群绑定"))
        self.StateTabWidget.setTabToolTip(self.StateTabWidget.indexOf(self.Bind), _translate("Arisu", "QQ群绑定配置录入"))
        self.ModeWidget.setTabToolTip(self.ModeWidget.indexOf(self.StateMonitor), _translate("Arisu", "状态监测"))
        self.KeyboardShortcutLabel.setText(_translate("Arisu", "键盘快捷键"))
        self.KeyboardShortcutTip.setText(_translate("Arisu", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Microsoft YaHei UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">区分：快捷键帮你“快”速操作当前软件，热键让你“热”启动系统或功能（无论在哪）。</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">快捷键：任意键盘单键(如 A、B)、鼠标侧键，操作本软件界面时生效，适用长按操作。</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">全局热键：仅限组合键 (如 Ctrl+Shift+X) 或 功能键 (如 F12)，软件启动后立即生效，存在长按需求的功能不可用。</span></p></body></html>"))
        self.SwitchReply_2.setText(_translate("Arisu", "施工中......"))
        self.SwitchReply_3.setText(_translate("Arisu", "开启自动回复"))
        self.SwitchReply_4.setText(_translate("Arisu", "开启自动回复"))
        self.SwitchReply_5.setText(_translate("Arisu", "开启自动回复"))
        self.SwitchReply_6.setText(_translate("Arisu", "开启自动回复"))
        self.SwitchReply_7.setText(_translate("Arisu", "开启自动回复"))
        self.SwitchReply_8.setText(_translate("Arisu", "开启自动回复"))
        self.ModeWidget.setTabToolTip(self.ModeWidget.indexOf(self.KeyboardShortcut), _translate("Arisu", "键盘快捷键"))
        self.QuestionLinksBackground.setText(_translate("Arisu", "<html><head/><body><p><span style=\" font-size:16pt;\">以下10点内容都是抄之前写的，内容不乏已经过失了。</span><span style=\" font-family:\'Menlo\',\'Roboto Mono\',\'Courier New\',\'Courier\',\'monospace\',\'Inter\',\'sans-serif\'; font-size:16pt; color:#e45649;\">🤖</span></p><p><span style=\" font-size:16pt;\">1.</span><span style=\" font-family:\'Menlo\',\'Roboto Mono\',\'Courier New\',\'Courier\',\'monospace\',\'Inter\',\'sans-serif\'; font-size:16pt; color:#494949;\">🚀</span><span style=\" font-size:16pt;\">本项目是基于自主研发的DeepseekConversationEngine类库</span><a href=\"https://github.com/yandifei/DeepseekConversationEngine\"><span style=\" font-family:\'quote-cjk-patch\',\'Inter\',\'system-ui\',\'-apple-system\',\'BlinkMacSystemFont\',\'Segoe UI\',\'Roboto\',\'Noto Sans\',\'Ubuntu\',\'Cantarell\',\'Helvetica Neue\',\'Oxygen\',\'Open Sans\',\'sans-serif\'; font-size:16pt; text-decoration: underline; color:#3b82f6; background-color:#ffffff;\">📦</span></a><span style=\" font-size:16pt;\">开发的示例程序，通过调用案例直观演示该库的功能特性与开发流程。</span></p><p><span style=\" font-size:16pt;\">2.示例项目源码地址：</span><a href=\"https://github.com/yandifei/DeepseekConversationEngine/tree/main/调用示例/QQ机器人\"><span style=\" font-size:16pt; text-decoration: underline; color:#003e92;\">https://github.com/yandifei/DeepseekConversationEngine/tree/main/调用示例/QQ机器人</span></a><span style=\" font-family:\'Menlo\',\'Roboto Mono\',\'Courier New\',\'Courier\',\'monospace\',\'Inter\',\'sans-serif\'; font-size:16pt; color:#494949;\">📂</span></p><p><span style=\" font-size:16pt;\">3.核心类库仓库地址：</span><a href=\"https://github.com/yandifei/DeepseekConversationEngine\"><span style=\" font-size:16pt; text-decoration: underline; color:#003e92;\">https://github.com/yandifei/DeepseekConversationEngine</span></a></p><p><span style=\" font-size:16pt;\">4.</span><span style=\" font-family:\'Menlo\',\'Roboto Mono\',\'Courier New\',\'Courier\',\'monospace\',\'Inter\',\'sans-serif\'; font-size:16pt; color:#e45649;\">🔧</span><span style=\" font-size:16pt;\">必须先在环境变量里</span><span style=\" font-family:\'Menlo\',\'Roboto Mono\',\'Courier New\',\'Courier\',\'monospace\',\'Inter\',\'sans-serif\'; font-size:16pt; color:#494949;\">⚙️</span><span style=\" font-size:16pt;\">配置好密钥</span><span style=\" font-family:\'quote-cjk-patch\',\'Inter\',\'system-ui\',\'-apple-system\',\'BlinkMacSystemFont\',\'Segoe UI\',\'Roboto\',\'Noto Sans\',\'Ubuntu\',\'Cantarell\',\'Helvetica Neue\',\'Oxygen\',\'Open Sans\',\'sans-serif\'; font-size:16pt; color:#404040; background-color:#ffffff;\">🔐</span><span style=\" font-size:16pt;\">，不懂的可以去看相关视频</span><span style=\" font-family:\'Menlo\',\'Roboto Mono\',\'Courier New\',\'Courier\',\'monospace\',\'Inter\',\'sans-serif\'; font-size:16pt; color:#494949;\">📺</span><span style=\" font-size:16pt;\">或查看文档目录下的deepseek对话引擎文件</span></p><p><span style=\" font-size:16pt;\">5.优先查看文档解决问题，文档没有问AI(直接粘贴报错提示)或把报错发作者QQ邮箱:3058439878@qq.com</span></p><p><span style=\" font-size:16pt;\">6.此程序的根本目的是打造接入DeepSeek的API接口实现“满分”</span><span style=\" font-family:\'quote-cjk-patch\',\'Inter\',\'system-ui\',\'-apple-system\',\'BlinkMacSystemFont\',\'Segoe UI\',\'Roboto\',\'Noto Sans\',\'Ubuntu\',\'Cantarell\',\'Helvetica Neue\',\'Oxygen\',\'Open Sans\',\'sans-serif\'; font-size:16pt; color:#404040; background-color:#ffffff;\">🧠</span><span style=\" font-size:16pt;\">的问题解答和为用户提供《情绪价值</span><span style=\" font-family:\'quote-cjk-patch\',\'Inter\',\'system-ui\',\'-apple-system\',\'BlinkMacSystemFont\',\'Segoe UI\',\'Roboto\',\'Noto Sans\',\'Ubuntu\',\'Cantarell\',\'Helvetica Neue\',\'Oxygen\',\'Open Sans\',\'sans-serif\'; font-size:16pt; color:#404040; background-color:#ffffff;\">💖</span><span style=\" font-size:16pt;\">》！</span></p><p><span style=\" font-size:16pt;\">7.提供了预定的人设(已经调教好了)，</span><a href=\"https://docs/troubleshooting.md\"><span style=\" font-family:\'quote-cjk-patch\',\'Inter\',\'system-ui\',\'-apple-system\',\'BlinkMacSystemFont\',\'Segoe UI\',\'Roboto\',\'Noto Sans\',\'Ubuntu\',\'Cantarell\',\'Helvetica Neue\',\'Oxygen\',\'Open Sans\',\'sans-serif\'; font-size:16pt; text-decoration: underline; color:#3b82f6; background-color:#ffffff;\">📚</span></a><span style=\" font-size:16pt;\">文档中记载了自定义人设的方法</span><span style=\" font-family:\'quote-cjk-patch\',\'Inter\',\'system-ui\',\'-apple-system\',\'BlinkMacSystemFont\',\'Segoe UI\',\'Roboto\',\'Noto Sans\',\'Ubuntu\',\'Cantarell\',\'Helvetica Neue\',\'Oxygen\',\'Open Sans\',\'sans-serif\'; font-size:16pt; color:#404040; background-color:#ffffff;\">🎭</span><span style=\" font-size:16pt;\">，可自行查看修改。</span></p><p><span style=\" font-size:16pt;\">8.MIT协议</span><span style=\" font-family:\'quote-cjk-patch\',\'Inter\',\'system-ui\',\'-apple-system\',\'BlinkMacSystemFont\',\'Segoe UI\',\'Roboto\',\'Noto Sans\',\'Ubuntu\',\'Cantarell\',\'Helvetica Neue\',\'Oxygen\',\'Open Sans\',\'sans-serif\'; font-size:16pt; color:#404040; background-color:#ffffff;\">📜</span><span style=\" font-size:16pt;\">保留原始版权可自由修改，</span><span style=\" font-family:\'quote-cjk-patch\',\'Inter\',\'system-ui\',\'-apple-system\',\'BlinkMacSystemFont\',\'Segoe UI\',\'Roboto\',\'Noto Sans\',\'Ubuntu\',\'Cantarell\',\'Helvetica Neue\',\'Oxygen\',\'Open Sans\',\'sans-serif\'; font-size:16pt; color:#404040; background-color:#ffffff;\">🚫</span><span style=\" font-size:16pt;\">禁止将该项目用于引流(带节奏)、纯色情、当键政等非法目的。</span><span style=\" font-family:\'quote-cjk-patch\',\'Inter\',\'system-ui\',\'-apple-system\',\'BlinkMacSystemFont\',\'Segoe UI\',\'Roboto\',\'Noto Sans\',\'Ubuntu\',\'Cantarell\',\'Helvetica Neue\',\'Oxygen\',\'Open Sans\',\'sans-serif\'; font-size:16pt; color:#404040; background-color:#ffffff;\">⚡</span></p><p><span style=\" font-size:16pt;\">9.如果您喜欢该项目或觉得该项目对您有所帮助，感谢您的使用。开源不易，如果可以请在项目根地址给我一个</span><span style=\" font-family:\'quote-cjk-patch\',\'Inter\',\'system-ui\',\'-apple-system\',\'BlinkMacSystemFont\',\'Segoe UI\',\'Roboto\',\'Noto Sans\',\'Ubuntu\',\'Cantarell\',\'Helvetica Neue\',\'Oxygen\',\'Open Sans\',\'sans-serif\'; font-size:16pt; font-weight:600; color:#404040; background-color:#ffffff;\">✨</span><span style=\" font-size:16pt;\">Star</span><span style=\" font-family:\'quote-cjk-patch\',\'Inter\',\'system-ui\',\'-apple-system\',\'BlinkMacSystemFont\',\'Segoe UI\',\'Roboto\',\'Noto Sans\',\'Ubuntu\',\'Cantarell\',\'Helvetica Neue\',\'Oxygen\',\'Open Sans\',\'sans-serif\'; font-size:16pt; font-weight:600; color:#404040; background-color:#ffffff;\">✨</span><span style=\" font-size:16pt;\">吧！</span></p><p><span style=\" font-size:16pt;\">10.QQ需要在设置里面把超级调色板调的分格调整成极简白，不然会报错！</span><img src=\":/Logo/Logo/128.ico\"/></p></body></html>"))
        self.ModeWidget.setTabToolTip(self.ModeWidget.indexOf(self.QuestionLinks), _translate("Arisu", "问题链接"))
        self.InitialInterfaceLocationComboBox.setToolTip(_translate("Arisu", "初始界面位置"))
        self.InitialInterfaceLocationComboBox.setItemText(0, _translate("Arisu", "主页"))
        self.InitialInterfaceLocationComboBox.setItemText(1, _translate("Arisu", "状态监测"))
        self.InitialInterfaceLocationComboBox.setItemText(2, _translate("Arisu", "热键"))
        self.InitialInterfaceLocationComboBox.setItemText(3, _translate("Arisu", "问题链接"))
        self.InitialInterfaceLocationComboBox.setItemText(4, _translate("Arisu", "用户设置"))
        self.APIKeyState.setToolTip(_translate("Arisu", "API录入状态显示"))
        self.APIKeyInput.setToolTip(_translate("Arisu", "<html><head/><body><p>deepseek的api密钥，如果要更换密钥也是这里输入并确认。</p></body></html>"))
        self.APIKeyInput.setPlaceholderText(_translate("Arisu", "请输入DeepSeek的API密钥(Key)"))
        self.APIKeyConfirm.setToolTip(_translate("Arisu", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Microsoft YaHei UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">1. 什么都不填直接点击确定能测试密钥是否已经存在。</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">2. 输入密钥点击确定检测密钥是否有效。</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt;\">3. 把密钥存储在存储系统密钥库中。</span></p></body></html>"))
        self.APIKeyConfirm.setText(_translate("Arisu", "确认"))
        self.Uninstall.setToolTip(_translate("Arisu", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Microsoft YaHei UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">没有挽留，只为尊重你的选择!卸载软件本体、回收资源和清除软件产生的文件，做到绝不留下任何一点垃圾。</p></body></html>"))
        self.Uninstall.setText(_translate("Arisu", "一键卸载"))
        self.ConsolePrint.setHtml(_translate("Arisu", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Cascadia Mono\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Microsoft YaHei UI\';\">print 调试输出（输出重定向）</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Microsoft YaHei UI\';\">没有实现日志输出重定向到这里，可惜了。</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Microsoft YaHei UI\';\"><br /></p></body></html>"))
        self.LogicCPUCountState.setToolTip(_translate("Arisu", "API录入状态显示"))
        self.LogicCPUCount.setToolTip(_translate("Arisu", "<html><head/><body><p><span style=\" font-size:11pt; color:#414141;\">输入可使用的逻辑核心数，默认通过编程计算。物理核心数乘上1.5后去掉小数点，如过这个值超过最大逻辑核心数就使用最大逻辑核心数。</span></p></body></html>"))
        self.LogicCPUCount.setPlaceholderText(_translate("Arisu", "请输入运行的最大逻辑核心数"))
        self.LogicCPUCountConfirm.setToolTip(_translate("Arisu", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'Microsoft YaHei UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#ff0000;\">不懂不要填！</span><span style=\" color:#ff0000;\">不懂不要填！不懂不要填！</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">如果无法获取逻辑核心数，这个值将完全交给用户填写并直接采纳。</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">如果能够获取逻辑核心数则会判断用户输入的核心数是否合理，超出后则使用最大逻辑核心数。</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">输入可使用的逻辑核心数，默认通过编程计算。物理核心数乘上1.5后去掉小数点，如过这个值超过最大逻辑核心数就使用最大逻辑核心数。</p></body></html>"))
        self.LogicCPUCountConfirm.setText(_translate("Arisu", "确认"))
        self.RestoreNavigationBarSortingButton.setText(_translate("Arisu", "还原导航栏排序"))
        self.RestoreNavigationBarSortingButton_2.setText(_translate("Arisu", "还原导航栏排序"))
        self.RestoreNavigationBarSortingButton_3.setText(_translate("Arisu", "还原导航栏排序"))
        self.RestoreNavigationBarSortingButton_4.setText(_translate("Arisu", "还原导航栏排序"))
        self.RestoreNavigationBarSortingButton_5.setText(_translate("Arisu", "还原导航栏排序"))
        self.ModeWidget.setTabToolTip(self.ModeWidget.indexOf(self.Settings), _translate("Arisu", "用户设置"))
from PyQt6.QtMultimediaWidgets import QVideoWidget
